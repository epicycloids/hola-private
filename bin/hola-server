#!/usr/bin/env python3
"""
Command-line entry point for starting a HOLA optimization server.
"""

import argparse
import multiprocessing as mp
import time

from hola.core.coordinator import OptimizationCoordinator
from hola.core.samplers import SobolSampler
from hola.server import SchedulerProcess, Server
from hola.utils.logging import setup_logging


def main():
    parser = argparse.ArgumentParser(description="Start HOLA optimization server")
    parser.add_argument("--host", default="localhost", help="Host to bind server to")
    parser.add_argument("--port", type=int, default=8000, help="Port to bind server to")
    parser.add_argument("--dimension", type=int, default=2, help="Dimension of parameter space")
    args = parser.parse_args()

    # Setup logging
    logger = setup_logging("HOLAServer")

    # Create a simple default coordinator
    hypercube_sampler = SobolSampler(dimension=args.dimension)
    coordinator = OptimizationCoordinator.from_dict(
        hypercube_sampler=hypercube_sampler,
        objectives_dict={},
        parameters_dict={},
    )

    # Set up shared counter for active workers
    active_workers = mp.Value("i", 0)

    # Start scheduler
    scheduler = SchedulerProcess(coordinator)
    scheduler.active_workers = active_workers
    scheduler_process = mp.Process(target=scheduler.run)
    scheduler_process.start()

    # Give scheduler time to start
    time.sleep(0.5)

    # Start server
    server = Server(host=args.host, port=args.port, active_workers=active_workers)
    server.start()

    logger.info(f"HOLA server running on http://{args.host}:{args.port}")
    print(f"HOLA server running on http://{args.host}:{args.port}")
    print("Press Ctrl+C to stop")

    try:
        # Keep running until interrupted
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("Shutting down due to keyboard interrupt")
        print("\nShutting down...")

        # Clean up
        scheduler_process.terminate()
        scheduler_process.join(timeout=2)
        server.stop()

        logger.info("Server stopped")
        print("Server stopped")


if __name__ == "__main__":
    main()